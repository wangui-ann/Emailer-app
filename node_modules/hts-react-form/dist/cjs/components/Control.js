"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
function Control(_a) {
    var control = _a.control, labelStyles = _a.labelStyles, labelClassName = _a.labelClassName, errorStyles = _a.errorStyles, errorClassName = _a.errorClassName;
    var _b = (0, react_1.useState)(''), error = _b[0], setError = _b[1];
    var onChangeHandler = function (e, control) {
        var _a;
        e.preventDefault();
        if (control.required && !((_a = e.target.value) === null || _a === void 0 ? void 0 : _a.trim())) {
            setError("".concat(control.label, " is required."));
        }
        else {
            setError('');
        }
        if (control.validation) {
            var pattern = control.validation.pattern;
            if (pattern && !(pattern === null || pattern === void 0 ? void 0 : pattern.test(e.target.value))) {
                setError(control.validation.message);
            }
            else {
                setError('');
            }
        }
        control.onChange(e);
    };
    var renderControl = function (control, labelStyles, labelClassName, errorClassName, errorStyles) {
        var _a;
        var labelTag = (react_1["default"].createElement("label", { style: labelStyles, className: "".concat(labelClassName ? labelClassName : 'htsform__label') }, control.label));
        var errorTag = (react_1["default"].createElement("p", { style: errorStyles, className: "".concat(errorClassName ? errorClassName : 'htsform__error') }, error));
        var InputTag = (react_1["default"].createElement("input", { type: control.type, name: control.name, placeholder: control === null || control === void 0 ? void 0 : control.placeholder, value: control === null || control === void 0 ? void 0 : control.value, onChange: function (e) { return onChangeHandler(e, control); }, className: "".concat(control.className ? control.className : 'htsform__control'), style: control.styles, required: control.required || false }));
        var SelectTag = (react_1["default"].createElement("select", { name: control.name, value: control === null || control === void 0 ? void 0 : control.value, onChange: function (e) { return onChangeHandler(e, control); }, className: "".concat(control.className ? control.className : 'htsform__control'), style: control.styles, required: control.required || false }, (_a = control === null || control === void 0 ? void 0 : control.options) === null || _a === void 0 ? void 0 : _a.map(function (option, index) { return (react_1["default"].createElement("option", { key: index, value: option.value }, option.label)); })));
        var TextareaTag = (react_1["default"].createElement("textarea", { name: control.name, placeholder: control === null || control === void 0 ? void 0 : control.placeholder, value: control === null || control === void 0 ? void 0 : control.value, onChange: function (e) { return onChangeHandler(e, control); }, className: "".concat(control.className ? control.className : 'htsform__control'), style: control.styles, required: control.required || false }));
        switch (control.type) {
            case 'text':
                return (react_1["default"].createElement("div", { className: 'htsform__control__group' },
                    labelTag,
                    InputTag,
                    errorTag));
            case 'select':
                return (react_1["default"].createElement("div", { className: 'htsform__control__group' },
                    labelTag,
                    SelectTag,
                    errorTag));
            case 'textarea':
                return (react_1["default"].createElement("div", { className: 'htsform__control__group' },
                    labelTag,
                    TextareaTag,
                    errorTag));
            default:
                return (react_1["default"].createElement("div", { className: 'htsform__control__group' },
                    labelTag,
                    InputTag,
                    errorTag));
        }
    };
    return renderControl(control, labelStyles, labelClassName, errorClassName, errorStyles);
}
exports["default"] = Control;
//# sourceMappingURL=Control.js.map